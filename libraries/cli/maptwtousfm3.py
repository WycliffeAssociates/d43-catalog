#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
This tool reads a USFM file (generated by csvtousfm3.py)
and injects tW links to the matching Greek or Hebrew words.

Assumptions:
1. The tW RC contains a list of occurrences for each word.
2. This list of occurrences is stored in the config.yaml file
3. The word content contains a number 2 heading "Word Data" section under which is the strong numbers
"""

import argparse
import os
import sys

from resource_container import factory, ResourceContainer
from libraries.tools.file_utils import write_file, read_file

def indexOccurrences(words_rc):
    """
    Generates an index of word occurrences where strong numbers may be looked up by
    textual occurrence. passage occurrence -> word -> strong.
    e.g. rc://en/ulb/book/1co/01/01 -> jesus -> G2424, G5547
    :param words_rc:
    :type words_rc: ResourceContainer.RC
    :return:
    """
    index = {}
    config = words_rc.config()
    for word in config:
        word_obj = config[word]
        if 'occurrences' in word_obj:
            for location in word_obj['occurrences']:
                parts = location.split('/')
                length = len(parts)
                verse = '{}'.format(int(parts[length-1]))
                chapter = '{}'.format(int(parts[length-2]))
                book = parts[length - 3]
                location = '{}/{}/{}'.format(book, chapter, verse)
                if location in index:
                    # append to index
                    index[location].append(word)
                else:
                    # create index
                    index[location] = [word]
    return index

def indexStrongs(word, words_rc):
    pass

def getLocationWords(location, index, rc_cache):
    if location in index:
        return index[location]
    else:
        return []


def mapWords(usfm, words_rc):
    """
    Injects tW links into the usfm
    :param usfm_dir:
    :param words_rc_dir: tW resource container
    :return:
    """
    if sys.version_info >= (3,0,0):
        raise Exception('Only python 2.7 is supported')
    rc = factory.load(words_rc)

    return []

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__,
                                   formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-u', '--usfm', dest='usfm', required=True, help='Directory containing USFM files to read')
    parser.add_argument('-w', '--words', dest='words', required=True, help='tW resource container to read. The project should contain a config.yaml with word occurrences indicated')
    parser.add_argument('-o', '--output', dest='output', required=True, help='Directory where to save the updated USFM')

    args = parser.parse_args(sys.argv[1:])
    if os.path.isfile(args.output):
        raise Exception('Output must be a directory')

    rc = factory.load(args.words)
    # TODO: fix this.
    usfm_books = mapWords(args.usfm, rc)

    for book in usfm_books:
        file_path = os.path.join(args.output, '{}-{}.usfm'.format(book['sort'], book['id']))
        write_file(file_path, book['usfm'])