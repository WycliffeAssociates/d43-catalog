#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""
This tool reads a USFM file (generated by csvtousfm3.py)
and injects tW links to the matching Greek or Hebrew words.
"""

import argparse
import os
import sys

from resource_container import factory
from libraries.tools.file_utils import write_file

def mapWords(usfm_dir, words_rc_dir):
    """
    Injects tW links into the usfm
    :param usfm_dir:
    :param words_rc_dir: tW resource container
    :return:
    """
    if sys.version_info >= (3,0,0):
        raise Exception('Only python 2.7 is supported')
    rc = factory.load(words_rc_dir)

    return []

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__,
                                   formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-u', '--usfm', dest='usfm', required=True, help='Directory containing USFM files to read')
    parser.add_argument('-w', '--words', dest='words', required=True, help='tW resource container to read. The project should contain a config.yaml with word occurrences indicated')
    parser.add_argument('-o', '--output', dest='output', required=True, help='Directory where to save the updated USFM')

    args = parser.parse_args(sys.argv[1:])
    if os.path.isfile(args.output):
        raise Exception('Output must be a directory')

    usfm_books = mapWords(args.usfm, args.words)

    for book in usfm_books:
        file_path = os.path.join(args.output, '{}-{}.usfm'.format(book['sort'], book['id']))
        write_file(file_path, book['usfm'])